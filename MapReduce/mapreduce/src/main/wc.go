package main

import (
	"fmt"
	"mapreduce/src/mapreduce"
	"os"
	"unicode"
	"strconv"
)

//
// The map function is called once for each file of input! The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
    var words []string
    word := ""

    for _, letter := range contents {
        if unicode.IsLetter(letter) {
            word += string(letter)
        } else if len(word) > 0 { //it means we have a word
            words = append(words, word)
            word = "" //reset word
        }
    }

    if len(word) > 0 { //add last word if theres any 
        words = append(words, word)
    }

    dictionary := make([]mapreduce.KeyValue, 0)

    for _, word := range words { //add occurences
        dictionary = append(dictionary, mapreduce.KeyValue{Key: word, Value: "1"})
    }

    return dictionary
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func reduceF(key string, values []string) string {
    total := 0
    for _, value := range values {
        intval, err := strconv.Atoi(value)
        if err != nil {
            fmt.Println("fail")
        }
        total += intval
    }
    totalasstr := strconv.Itoa(total)
    return totalasstr

}

// Can be run in 3 ways:
// 1) $equential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) M@ster (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
